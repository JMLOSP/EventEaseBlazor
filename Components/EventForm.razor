@namespace EventEase.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<EditForm Model="@eventModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    
    <div class="card p-4 shadow-sm">
        <h3 class="mb-4">Crear Nuevo Evento</h3>
        
        <div class="mb-3">
            <label for="eventName" class="form-label">Nombre del Evento</label>
            <InputText id="eventName" class="form-control" @bind-Value="eventModel.EventName" placeholder="Ingrese el nombre del evento" />
            <ValidationMessage For="@(() => eventModel.EventName)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="eventDate" class="form-label">Fecha del Evento</label>
            <InputDate id="eventDate" class="form-control" @bind-Value="eventModel.EventDate" />
            <ValidationMessage For="@(() => eventModel.EventDate)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="eventLocation" class="form-label">Ubicación</label>
            <InputText id="eventLocation" class="form-control" @bind-Value="eventModel.EventLocation" placeholder="Ingrese la ubicación del evento" />
            <ValidationMessage For="@(() => eventModel.EventLocation)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="eventDescription" class="form-label">Descripción</label>
            <InputTextArea id="eventDescription" class="form-control" @bind-Value="eventModel.Description" rows="3" placeholder="Descripción del evento (opcional)" />
            <ValidationMessage For="@(() => eventModel.Description)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="eventCapacity" class="form-label">Capacidad Máxima</label>
            <InputNumber id="eventCapacity" class="form-control" @bind-Value="eventModel.MaxCapacity" placeholder="Número máximo de asistentes" />
            <ValidationMessage For="@(() => eventModel.MaxCapacity)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="eventEmail" class="form-label">Email de Contacto</label>
            <InputText id="eventEmail" class="form-control" @bind-Value="eventModel.ContactEmail" placeholder="email@ejemplo.com" />
            <ValidationMessage For="@(() => eventModel.ContactEmail)" class="text-danger" />
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-2"></i>Crear Evento
            </button>
            <button type="button" class="btn btn-secondary" @onclick="ResetForm">
                <i class="fas fa-undo me-2"></i>Limpiar
            </button>
        </div>

        @if (showSuccessMessage)
        {
            <div class="alert alert-success mt-3" role="alert">
                <i class="fas fa-check-circle me-2"></i>¡Evento creado exitosamente!
            </div>
        }
    </div>
</EditForm>

@code {
    private EventModel eventModel = new();
    private bool showSuccessMessage = false;

    [Parameter] public EventCallback<EventModel> OnEventCreated { get; set; }

    private async Task HandleValidSubmit()
    {
        showSuccessMessage = true;
        await OnEventCreated.InvokeAsync(eventModel);
        
        // Auto-hide success message after 3 seconds
        await Task.Delay(3000);
        showSuccessMessage = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        showSuccessMessage = false;
    }

    private void ResetForm()
    {
        eventModel = new EventModel();
        showSuccessMessage = false;
    }

    public class EventModel
    {
        [Required(ErrorMessage = "El nombre del evento es requerido.")]
        [StringLength(100, ErrorMessage = "El nombre del evento no puede exceder 100 caracteres.")]
        public string EventName { get; set; } = string.Empty;

        [Required(ErrorMessage = "La fecha del evento es requerida.")]
        [DataType(DataType.Date)]
        [CustomValidation(typeof(EventModel), nameof(ValidateEventDate))]
        public DateTime EventDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "La ubicación del evento es requerida.")]
        [StringLength(200, ErrorMessage = "La ubicación no puede exceder 200 caracteres.")]
        public string EventLocation { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "La descripción no puede exceder 500 caracteres.")]
        public string Description { get; set; } = string.Empty;

        [Range(1, 10000, ErrorMessage = "La capacidad debe estar entre 1 y 10,000 asistentes.")]
        public int MaxCapacity { get; set; } = 50;

        [Required(ErrorMessage = "El email de contacto es requerido.")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido.")]
        public string ContactEmail { get; set; } = string.Empty;

        public static ValidationResult? ValidateEventDate(DateTime date, ValidationContext context)
        {
            if (date < DateTime.Today)
            {
                return new ValidationResult("La fecha del evento no puede ser en el pasado.");
            }

            if (date > DateTime.Today.AddYears(5))
            {
                return new ValidationResult("La fecha del evento no puede ser más de 5 años en el futuro.");
            }

            return ValidationResult.Success;
        }
    }
}
