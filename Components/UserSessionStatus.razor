@namespace EventEase.Components
@using EventEase.Services
@using EventEase.Models
@inject IUserSessionService UserSessionService
@implements IDisposable

@if (CurrentSession?.IsAuthenticated == true)
{
    <div class="dropdown">
        <button class="btn btn-outline-light dropdown-toggle" 
                type="button" 
                id="userMenuDropdown" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
            <i class="fas fa-user me-2"></i>@CurrentSession.FullName
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenuDropdown">
            <li>
                <h6 class="dropdown-header">
                    <i class="fas fa-clock me-2"></i>
                    Sesi贸n: @CurrentSession.SessionDuration.ToString(@"hh\:mm\:ss")
                </h6>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <a class="dropdown-item" href="/profile">
                    <i class="fas fa-user-edit me-2"></i>Mi Perfil
                </a>
            </li>
            <li>
                <a class="dropdown-item" href="/my-events">
                    <i class="fas fa-calendar-check me-2"></i>Mis Eventos
                </a>
            </li>
            <li>
                <a class="dropdown-item" href="/settings">
                    <i class="fas fa-cog me-2"></i>Configuraci贸n
                </a>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <button class="dropdown-item" @onclick="HandleLogout">
                    <i class="fas fa-sign-out-alt me-2"></i>Cerrar Sesi贸n
                </button>
            </li>
        </ul>
    </div>
}
else
{
    <div class="d-flex gap-2">
        <a href="/login" class="btn btn-outline-light">
            <i class="fas fa-sign-in-alt me-2"></i>Iniciar Sesi贸n
        </a>
        <a href="/register" class="btn btn-light">
            <i class="fas fa-user-plus me-2"></i>Registrarse
        </a>
    </div>
}

@code {
    private UserSession? CurrentSession;
    private Timer? _sessionTimer;

    protected override async Task OnInitializedAsync()
    {
        CurrentSession = UserSessionService.CurrentSession;
        UserSessionService.SessionChanged += OnSessionChanged;
        
        // Try to restore session from localStorage
        if (CurrentSession == null)
        {
            await ((UserSessionService)UserSessionService).RestoreSessionAsync();
            CurrentSession = UserSessionService.CurrentSession;
        }

        // Start a timer to update session duration and check for timeout
        _sessionTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                if (CurrentSession?.IsAuthenticated == true)
                {
                    await UserSessionService.UpdateSessionActivityAsync();
                    CurrentSession = UserSessionService.CurrentSession;
                    
                    if (!UserSessionService.IsSessionValid())
                    {
                        await HandleLogout();
                    }
                    else
                    {
                        StateHasChanged();
                    }
                }
            });
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(30));
    }

    private void OnSessionChanged(UserSession? session)
    {
        CurrentSession = session;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        await UserSessionService.LogoutAsync();
        CurrentSession = null;
    }

    public void Dispose()
    {
        UserSessionService.SessionChanged -= OnSessionChanged;
        _sessionTimer?.Dispose();
    }
}
